# // v4
# // file: docker-compose.yml
#version: "3.9"

services:
  kafka:
    image: bitnami/kafka:3.7
    container_name: kafka
    restart: unless-stopped
    environment:
      - KAFKA_ENABLE_KRAFT=yes
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_NODE_ID=1
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka:9093
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
      #- KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
      - KAFKA_CFG_OFFSETS_TOPIC_REPLICATION_FACTOR=1
      - KAFKA_CFG_TRANSACTION_STATE_LOG_REPLICATION_FACTOR=1
      - KAFKA_CFG_TRANSACTION_STATE_LOG_MIN_ISR=1
      #- KAFKA_CFG_NUM_PARTITIONS=6
      - ALLOW_PLAINTEXT_LISTENER=yes
      # Optional: speed up local boots
      - KAFKA_HEAP_OPTS=-Xms256m -Xmx256m
    ports:
      - "9092:9092"
    volumes:
      - kafka-data:/bitnami/kafka
    networks: [ nrg-net ]
    healthcheck:
      # “Accurate” check; slower but reliable for readiness
      test: [ "CMD-SHELL", "kafka-broker-api-versions.sh --bootstrap-server localhost:9092 >/dev/null 2>&1" ]
      interval: 5s
      timeout: 3s
      retries: 20

  zone-simulator:
    image: nrg-champ/zone-simulator:dev
    build:
      context: .
      dockerfile: ./zone_simulator/Dockerfile
    container_name: zone-simulator
    depends_on:
      kafka:
        condition: service_healthy
    environment:
      - KAFKA_BROKERS=kafka:9092
      - TOPIC_PREFIX=device.readings
      - SIM_PROPERTIES=/app/sim.properties
    volumes:
      - ./zone_simulator/sim.properties:/app/sim.properties:ro
    ports:
      - "8080:8080"
    restart: unless-stopped
    networks: [nrg-net]

  topic-init:
    build:
      context: .
      dockerfile: services/topic-init/Dockerfile
    image: nrg-champ/topic-init:dev
    container_name: topic-init
    restart: "no"
    depends_on:
      kafka:
        condition: service_healthy
    environment:
      - LEDGER_KAFKA_BROKERS=kafka:9092
      - LEDGER_TOPIC_TEMPLATE=zone.ledger.{zone}
      - LEDGER_ZONES=zone-A
      - LEDGER_TOPIC_REPLICATION=1
      - TOPIC_INIT_LOG=/var/log/topic-init/topic-init.log
    volumes:
      - ./logs/topic-init:/var/log/topic-init
    networks: [nrg-net]

  aggregator:
    build:
      context: .
      dockerfile: services/aggregator/Dockerfile
    image: nrg-champ/aggregator:latest
    container_name: aggregator
    restart: unless-stopped
    depends_on:
      kafka:
        condition: service_healthy
      zone-simulator:
        condition: service_healthy
      topic-init:
        condition: service_completed_successfully
    environment:
      AGGREGATOR_PROPS: /app/aggregator.properties
    volumes:
      - ./services/aggregator/aggregator.properties:/app/aggregator.properties:ro
      - ./deploy/data:/app/data
    ports:
      - "8081:8080"
    networks: [nrg-net]

  mape:
    build:
      context: .
      dockerfile: services/mape/Dockerfile
    image: nrg-champ/mape:dev
    container_name: mape
    environment:
      - ENV=dev
      - LISTEN_ADDR=:8090
      - KAFKA_BROKERS=kafka:9092
      - TOPIC_PREFIX=device.readings
      - COMMAND_TOPIC_PREFIX=device.commands
      - CONSUMER_GROUP=mape
      - CONTROL_INTERVAL=5s
      - DEADBAND_C=0.4
      - KP=12
      - MAX_FAN_PCT=100
      - TARGETS_FILE=/app/config/targets.properties
      - TARGETS_RELOAD_EVERY=15s
      - DEFAULT_TARGET_C=22.0
      - EXECUTE_MODE=http
      - zone_HTTP_BASE=http://zone-simulator:8080
      - LOG_LEVEL=INFO
      - LOG_FILE=/var/log/mape/mape.log
    volumes:
      - ./services/mape/mape.properties:/app/mape.properties:ro
    ports:
      - "8090:8080"
    networks: [nrg-net]
    depends_on:
      aggregator:
        condition: service_healthy
      topic-init:
        condition: service_completed_successfully
    restart: unless-stopped

  ledger:
    image: nrg-champ/ledger:dev
    build:
      context: .
      dockerfile: services/ledger/Dockerfile
    container_name: nrg-ledger
    environment:
      - LEDGER_ADDR=:8083
      - LEDGER_DATA=/app/data
      - LEDGER_LOGS=/app/logs
      - LEDGER_KAFKA_BROKERS=kafka:9092
      - LEDGER_GROUP_ID=ledger-service
      - LEDGER_TOPIC_TEMPLATE=zone.ledger.{zone}
      - LEDGER_ZONES=zone-A   # <- set the zones you actually want to consume
      - LEDGER_EPOCH_GRACE_MS=2000
      - LEDGER_BUFFER_MAX_EPOCHS=200
      - LEDGER_PARTITION_AGGREGATOR=0
      - LEDGER_PARTITION_MAPE=1
      - LEDGER_TOPIC_REPLICATION=1
    ports:
      - "8083:8083"
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
    restart: unless-stopped
    depends_on:
      kafka:
        condition: service_healthy
      topic-init:
        condition: service_completed_successfully
    networks: [ nrg-net ]

  gamification:
    build:
      context: .
      dockerfile: services/gamification/Dockerfile
    image: nrg-champ/gamification:dev
    container_name: gamification
    restart: unless-stopped
    depends_on:
      kafka:
        condition: service_healthy
      ledger:
        condition: service_started
    environment:
      - GAMIF_HTTP_PORT=8085
      - GAMIF_WINDOWS=24h,7d
      - GAMIF_REFRESH_EVERY=60s
      - LEDGER_KAFKA_BROKERS=kafka:9092
      - LEDGER_TOPIC=ledger.public.epochs
      - GAMIF_MAX_EPOCHS_PER_ZONE=1000
    ports:
      - "8085:8085"
    networks: [ nrg-net ]

#  assessment:
#    build:
#      context: ..
#      dockerfile: Dockerfile
#    image: nrgchamp/assessment:local
#    environment:
#      - LEDGER_BASE_URL=http://ledger:8084
#      - TARGET_TEMP_C=22
#      - COMFORT_TOLERANCE_C=0.5
#      - CACHE_TTL=30s
#      - ASSESSMENT_LOGFILE=/var/log/assessment/assessment.log
#      - ASSESSMENT_BIND_ADDR=:8085
#    ports:
#      - "8085:8085"
#    depends_on:
#      - ledger
#    volumes:
#      - assessment_logs:/var/log/assessment
#
#  gamification:
#    build: ./gamification
#    container_name: gamification
#    environment:
#      - LEDGER_BASE_URL=http://ledger:8084
#      - DATA_DIR=/data
#      - LOG_LEVEL=INFO
#      - ZONE_ID_DELIM=:
#    volumes:
#      - ./data/gamification:/data
#    ports:
#      - "8086:8086"
#    depends_on:
#      - ledger

networks:
  nrg-net: {}

volumes:
  kafka-data: {}
  agg-data: {}
